#include <iostream>
#include "sgx_urts.h"
#include "Enclave_u.h"
#include "sgx_uae_quote_ex.h"


#define ENCLAVE_NAME "enclave.signed.so"
sgx_enclave_id_t global_eid = 0;

const uint8_t g_ecdsa_p256_att_key_id_list[] = {
    0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x8c, 0x4f,
    0x57, 0x75, 0xd7, 0x96, 0x50, 0x3e, 0x96, 0x13,
    0x7f, 0x77, 0xc6, 0x8a, 0x82, 0x9a, 0x00, 0x56,
    0xac, 0x8d, 0xed, 0x70, 0x14, 0x0b, 0x08, 0x1b,
    0x09, 0x44, 0x90, 0xc5, 0x7b, 0xff, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

void oPrintStatus(sgx_status_t code){
    std::cout << "Enclave returned status: " << code << std::endl;;
}

void printErrorCode(int code){
    switch(code){
        case 100: std::cout << "Initialization Failure\n"; break;
        case 110: std::cout << "Increment Counter Failure\n"; break;
        case 120: std::cout << "Get Time Failure\n"; break;
        case 130: std::cout << "Attempt limit exceeded.\n"; break;
        case 140: std::cout << "Spacetime Anomaly check tardis diagnostics.\n"; break;
        case 150: std::cout << "Time limit exceeded. You are too slow.\n"; break;
        default: std::cout << "Unknown Error\n";
    }
}

int main()
{
    sgx_status_t ret = SGX_SUCCESS;
    sgx_launch_token_t token = { 0 };
    int updated = 0;

    std::cout << "Loading secret enclave ...";
    ret = sgx_create_enclave(ENCLAVE_NAME, SGX_DEBUG_FLAG, &token, &updated, \
            &global_eid, NULL);

    if (ret != SGX_SUCCESS) {
        std::cerr << "FAILED TO CREATE ENCLAVE. CODE: ";
        std::cerr << std::hex << ret << std::endl;
        return 1;
    }

    std::cout << "\nSelecting Attestation Key\n";
    sgx_att_key_id_t key_id = {};
    ret = sgx_select_att_key_id(
        g_ecdsa_p256_att_key_id_list,
        (uint32_t) sizeof(g_ecdsa_p256_att_key_id_list),
        &key_id);

    switch(ret){
        case SGX_SUCCESS:
            std::cout << "Key selected\n"; break;
        case SGX_ERROR_INVALID_PARAMETER:
            std::cerr << "ERR: Malformed Key List\n"; break;
        case SGX_ERROR_UNSUPPORTED_ATT_KEY_ID:
            std::cerr << "ERR: Unsupported Key\n"; break;
        default:
            std::cerr << "ERR: Unknown error\n";
    }

    std::cout << "Initializing quote\n";
    sgx_target_info_t targetInfo = {0};
    ret = sgx_init_quote_ex(&key_id, &targetInfo, NULL, NULL);
    switch(ret){
        case SGX_SUCCESS:
            std::cout << "Quote initialization succeeded\n"; break;
        default:
            std::cerr << "ERR: Unknown error initializing quote\n";
    }

    std::cout << "Request report from enclave\n";
    sgx_report_t report = {0};
    int retval=0;
    ret =  ecall_Hello(global_eid, &retval, &targetInfo, &report);

    if (ret == SGX_SUCCESS) {
        std::cout << "Enclave call returned without internal error\n";
        if (retval == 1) {
            std::cout << "Report created successfully\n";
        } else {
            std::cerr << "Report creation failed within enclave";
        }
    } else {
        std::cerr << "Enclave call failed\n";
        std::cerr << ret << std::endl;
    }

    return 0;
}

